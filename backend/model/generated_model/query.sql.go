// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
)

const boxById = `-- name: BoxById :one
SELECT id, user_id, name, created_at, updated_at FROM boxes 
WHERE id = $1
LIMIT 1
`

func (q *Queries) BoxById(ctx context.Context, id int32) (Box, error) {
	row := q.db.QueryRow(ctx, boxById, id)
	var i Box
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createBox = `-- name: CreateBox :one
INSERT INTO boxes (user_id, name)
VALUES ($1, $2)
RETURNING id, user_id, name, created_at, updated_at
`

type CreateBoxParams struct {
	UserID int32
	Name   string
}

func (q *Queries) CreateBox(ctx context.Context, arg CreateBoxParams) (Box, error) {
	row := q.db.QueryRow(ctx, createBox, arg.UserID, arg.Name)
	var i Box
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createNote = `-- name: CreateNote :one
INSERT INTO notes (user_id, title, content)
VALUES ($1, $2, $3)
RETURNING id, user_id, title, content, keep_in_inbox, created_at
`

type CreateNoteParams struct {
	UserID  int32
	Title   string
	Content string
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote, arg.UserID, arg.Title, arg.Content)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.KeepInInbox,
		&i.CreatedAt,
	)
	return i, err
}

const createNotesBox = `-- name: CreateNotesBox :one
INSERT INTO notes_boxes (note_id, box_id)
VALUES ($1, $2)
RETURNING note_id, box_id, created_at
`

type CreateNotesBoxParams struct {
	NoteID int32
	BoxID  int32
}

func (q *Queries) CreateNotesBox(ctx context.Context, arg CreateNotesBoxParams) (NotesBox, error) {
	row := q.db.QueryRow(ctx, createNotesBox, arg.NoteID, arg.BoxID)
	var i NotesBox
	err := row.Scan(&i.NoteID, &i.BoxID, &i.CreatedAt)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, full_name)
VALUES ($1, $2)
RETURNING id, email, full_name, is_active, created_at, updated_at
`

type CreateUserParams struct {
	Email    string
	FullName string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.FullName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBox = `-- name: DeleteBox :exec
DELETE FROM boxes
WHERE id = $1
`

func (q *Queries) DeleteBox(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBox, id)
	return err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes
WHERE id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteNote, id)
	return err
}

const deleteNotesBox = `-- name: DeleteNotesBox :exec
DELETE FROM notes_boxes
WHERE note_id = $1 AND box_id = $2
`

type DeleteNotesBoxParams struct {
	NoteID int32
	BoxID  int32
}

func (q *Queries) DeleteNotesBox(ctx context.Context, arg DeleteNotesBoxParams) error {
	_, err := q.db.Exec(ctx, deleteNotesBox, arg.NoteID, arg.BoxID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const listBoxes = `-- name: ListBoxes :many
SELECT id, user_id, name, created_at, updated_at FROM boxes
`

func (q *Queries) ListBoxes(ctx context.Context) ([]Box, error) {
	rows, err := q.db.Query(ctx, listBoxes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Box
	for rows.Next() {
		var i Box
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotes = `-- name: ListNotes :many
SELECT id, user_id, title, content, keep_in_inbox, created_at FROM notes
`

func (q *Queries) ListNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.Query(ctx, listNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.KeepInInbox,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotesBoxes = `-- name: ListNotesBoxes :many
SELECT note_id, box_id, created_at FROM notes_boxes
`

func (q *Queries) ListNotesBoxes(ctx context.Context) ([]NotesBox, error) {
	rows, err := q.db.Query(ctx, listNotesBoxes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NotesBox
	for rows.Next() {
		var i NotesBox
		if err := rows.Scan(&i.NoteID, &i.BoxID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, full_name, is_active, created_at, updated_at FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const noteById = `-- name: NoteById :one
SELECT id, user_id, title, content, keep_in_inbox, created_at FROM notes 
WHERE id = $1
LIMIT 1
`

func (q *Queries) NoteById(ctx context.Context, id int32) (Note, error) {
	row := q.db.QueryRow(ctx, noteById, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.KeepInInbox,
		&i.CreatedAt,
	)
	return i, err
}

const notesBoxesByBoxId = `-- name: NotesBoxesByBoxId :many
SELECT note_id, box_id, created_at FROM notes_boxes 
WHERE box_id = $1
`

func (q *Queries) NotesBoxesByBoxId(ctx context.Context, boxID int32) ([]NotesBox, error) {
	rows, err := q.db.Query(ctx, notesBoxesByBoxId, boxID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NotesBox
	for rows.Next() {
		var i NotesBox
		if err := rows.Scan(&i.NoteID, &i.BoxID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const notesBoxesByNoteId = `-- name: NotesBoxesByNoteId :many
SELECT note_id, box_id, created_at FROM notes_boxes 
WHERE note_id = $1
`

func (q *Queries) NotesBoxesByNoteId(ctx context.Context, noteID int32) ([]NotesBox, error) {
	rows, err := q.db.Query(ctx, notesBoxesByNoteId, noteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NotesBox
	for rows.Next() {
		var i NotesBox
		if err := rows.Scan(&i.NoteID, &i.BoxID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBox = `-- name: UpdateBox :one
UPDATE boxes
SET user_id = $2, name = $3
WHERE id = $1
RETURNING id, user_id, name, created_at, updated_at
`

type UpdateBoxParams struct {
	ID     int32
	UserID int32
	Name   string
}

func (q *Queries) UpdateBox(ctx context.Context, arg UpdateBoxParams) (Box, error) {
	row := q.db.QueryRow(ctx, updateBox, arg.ID, arg.UserID, arg.Name)
	var i Box
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateNote = `-- name: UpdateNote :one
UPDATE notes
SET user_id = $2, title = $3, content = $4
WHERE id = $1
RETURNING id, user_id, title, content, keep_in_inbox, created_at
`

type UpdateNoteParams struct {
	ID      int32
	UserID  int32
	Title   string
	Content string
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, updateNote,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Content,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.KeepInInbox,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $2, full_name = $3
WHERE id = $1
RETURNING id, email, full_name, is_active, created_at, updated_at
`

type UpdateUserParams struct {
	ID       int32
	Email    string
	FullName string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Email, arg.FullName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userById = `-- name: UserById :one
SELECT id, email, full_name, is_active, created_at, updated_at FROM users 
WHERE id = $1
LIMIT 1
`

func (q *Queries) UserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, userById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
